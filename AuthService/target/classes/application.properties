spring.datasource.url=jdbc:postgresql://localhost:5432/demo
spring.datasource.username=postgres
spring.datasource.password=rmit
spring.sql.init.platform=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create-drop

spring.main.allow-circular-references= true


spring.security.oauth2.client.registration.google.client-id = 776771201310-ctrpmraktdvgipgbj3o1pfb0iuv5ldo7.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
app.oauth2.authorizedRedirectUris=http://localhost:3000/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect